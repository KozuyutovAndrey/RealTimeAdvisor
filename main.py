# –ü—Ä–∏–º–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Vosk –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ SoundDevice –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ
# –∏ VB-Cable –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞

import sounddevice as sd
import queue
import json
import subprocess
import time
import threading
import signal
from vosk import Model, KaldiRecognizer

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
MODEL_PATH = "vosk-model-small-ru-0.22"
NIRCMD_PATH = "nircmdc.exe"
VBCABLE_NAME = "CABLE-A Input"         # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ —Å—é–¥–∞
JABRA_NAME = "Headset Earphone"        # –í–æ–∑–≤—Ä–∞—Ç –∑–≤—É–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã
SAMPLE_RATE = 16000

# –ù–∞–∑–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±—Ä–∞—Ç—å —Ç—É—Ç cmd: .\nircmd.exe showsounddevices

# === –û—á–µ—Ä–µ–¥–∏ ===
q_mic = queue.Queue()
q_vb = queue.Queue()

# === –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª–∏ ===
model = Model(MODEL_PATH)
rec_mic = KaldiRecognizer(model, SAMPLE_RATE)
rec_vb = KaldiRecognizer(model, SAMPLE_RATE)

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C
stop_flag = False
def handle_sigint(sig, frame):
    global stop_flag
    stop_flag = True
signal.signal(signal.SIGINT, handle_sigint)

# === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
def set_default_output(device_name):
    subprocess.call([NIRCMD_PATH, "setdefaultsounddevice", device_name, "0"])
    time.sleep(1)

# === –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def find_device(name_like):
    for i, dev in enumerate(sd.query_devices()):
        if name_like.lower() in dev["name"].lower() and dev["max_input_channels"] > 0:
            return i
    return None

# === Callback'–∏ ===
def callback_mic(indata, frames, time, status):
    q_mic.put(bytes(indata))

def callback_vb(indata, frames, time, status):
    q_vb.put(bytes(indata))

# === –ü–æ—Ç–æ–∫–∏ ===
def listen_mic(device_id):
    with sd.RawInputStream(samplerate=SAMPLE_RATE, blocksize=8000, dtype='int16',
                           channels=1, callback=callback_mic, device=device_id):
        while not stop_flag:
            if not q_mic.empty():
                data = q_mic.get()
                if rec_mic.AcceptWaveform(data):
                    result = json.loads(rec_mic.Result())
                    if result.get("text"):
                        print("üë®‚Äçüíº –°–û–í–ï–¢–ù–ò–ö:", result["text"])

def listen_vbcable(device_id):
    with sd.RawInputStream(samplerate=SAMPLE_RATE, blocksize=8000, dtype='int16',
                           channels=1, callback=callback_vb, device=device_id):
        while not stop_flag:
            if not q_vb.empty():
                data = q_vb.get()
                if rec_vb.AcceptWaveform(data):
                    result = json.loads(rec_vb.Result())
                    if result.get("text"):
                        print("üßë‚Äçüíº –ö–õ–ò–ï–ù–¢:", result["text"])

# === –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
if __name__ == "__main__":
    try:
        print("üîç –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        mic_id = find_device("microphone")
        vb_id = find_device("cable-a output")

        if mic_id is None or vb_id is None:
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–ª–∏ CABLE-A Output. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")

        print(f"üéôÔ∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω ID: {mic_id}")
        print(f"üéß CABLE-A Output ID: {vb_id}")

        print("üîà –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–∞ –≥–∞–ª–æ—á–∫–∞ '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' –¥–ª—è CABLE-A Output.")
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ {VBCABLE_NAME}...")
        set_default_output(VBCABLE_NAME)

        print("üé§ –°–ª—É—à–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫...\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        t1 = threading.Thread(target=listen_mic, args=(mic_id,), daemon=True)
        t2 = threading.Thread(target=listen_vbcable, args=(vb_id,), daemon=True)

        t1.start()
        t2.start()

        while not stop_flag:
            time.sleep(0.5)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    finally:
        print(f"\nüîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤—É–∫ –Ω–∞ {JABRA_NAME}...")
        set_default_output(JABRA_NAME)
        print("üëã –ì–æ—Ç–æ–≤–æ.")
